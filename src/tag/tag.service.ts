import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { Repository } from "typeorm";
import { Tag } from "./entities/tag.entity";
import { CreateTagDTO } from "./dto/create-tag.dto";
import { UpdateTagDTO } from "./dto/update-tag.dto";

@Injectable()
export class TagService {
  constructor(
    @InjectRepository(Tag)
    private readonly tagRepository: Repository<Tag>
  ) {}

  async findAllTags(): Promise<Tag[]> {
    return this.tagRepository.find();
  }

  async findOneTag(id: string): Promise<Tag> {
    return this.tagRepository.findOne({ where: { id: id } });
  }

  async createTag(createTagDto: CreateTagDTO): Promise<Tag> {
    // The create method only creates a new object in memory, 
    // so the missing 'id' and 'tours' fields will not be an issue here.
    const tag = this.tagRepository.create(createTagDto);
    
    // The save method will then handle the insertion of the new tag,
    // and the 'id' will be automatically generated by the database.
    // The 'tours' field is relational and can be set up to be null initially
    // until tours are associated with this tag.
    return this.tagRepository.save(tag);
  }
  
  async updateTag(updateTagDto: UpdateTagDTO): Promise<Tag> {
    const tag = await this.tagRepository.preload({
      id: updateTagDto.id,
      ...updateTagDto,
    });
    if (!tag) {
      throw new Error("Tag not found");
    }
    return this.tagRepository.save(tag);
  }

  async removeTag(id: string): Promise<void> {
    const tag = await this.tagRepository.findOne({ where: { id: id } });
    if (!tag) {
      throw new Error("Tag not found");
    }
    await this.tagRepository.remove(tag);
  }

  async activateTag(id: string): Promise<Tag> {
    const tag = await this.tagRepository.findOne({ where: { id: id } });
    if (!tag) {
      throw new Error("Tag not found");
    }
    tag.active = true;
    return this.tagRepository.save(tag);
  }

  async deactivateTag(id: string): Promise<Tag> {
    const tag = await this.tagRepository.findOne({ where: { id: id } });
    if (!tag) {
      throw new Error("Tag not found");
    }
    tag.active = false;
    return this.tagRepository.save(tag);
  }
}
